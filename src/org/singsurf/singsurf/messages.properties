acurve.longName=Algebraic Curves
acurve.shortName=Acurve
acurve.egFile=defs/acurve.defs
acurve.className=ACurve
acurve.defaultDef=<definition name="ACurve" type="acurve">\n\
    x^2+y^2-1;\n\
    <variable name="x" min="-1.14" max="1.03" type="none">\n\
    <variable name="y" min="-1.13" max="1.04" type="none">\n\
    </definition>

asurf.longName=Algebraic Surfaces
asurf.shortName=Asurf
asurf.egFile=defs/asurf.defs
asurf.className=ASurf
asurf.defaultDef=<definition name="ASurf" type="asurf">\n\
    x^2+y^2-z^2;\n\
    <variable name="x" min="-1.14" max="1.03" type="none">\n\
    <variable name="y" min="-1.13" max="1.04" type="none">\n\
    <variable name="z" min="-1.12" max="1.05" type="none">\n\
    </definition>
#asurf.defaultDef=x^2+y^2-z^2;

psurf.longName=Parameterized Surfaces
psurf.shortName=Psurf
psurf.egFile=defs/psurf.defs
psurf.className=Psurf
psurf.defaultDef=<definition name="PSurf" type="psurf">\n\
    [x,y,0];\n\
    <variable name="x" min="-1" max="1" type="none">\n\
    <variable name="y" min="-1" max="1" type="none">\n\
    </definition>

pcurve.longName=Parameterized Curves
pcurve.shortName=Pcurve
pcurve.egFile=defs/pcurve.defs
pcurve.className=Pcurve
pcurve.defaultDef=<definition name="PCurve" type="pcurve">\n\
    [x,0,0];\n\
    <variable name="x" min="-1" max="1" type="none">\n\
    </definition>

intersect.longName=Intersections
intersect.shortName=Intersection
intersect.egFile=defs/intersect.defs
intersect.className=Intersection
intersect.defaultDef=<definition name="Intersect" type="intersect">\n\
    x+y+z;\n\
    <variable name="x" type="none">\n\
    <variable name="y" type="none">\n\
    <variable name="z" type="none">\n\
    </definition>

mapping.longName=Mappings
mapping.shortName=Mapping
mapping.egFile=defs/mapping.defs
mapping.className=Mapping
mapping.defaultDef=<definition name="Mapping" type="mapping">\n\
    [x,y,z];\n\
    <variable name="x" type="none">\n\
    <variable name="y" type="none">\n\
    <variable name="z" type="none">\n\
    </definition>

clip.longName=Clip
clip.shortName=Clip
clip.egFile=defs/clip.defs
clip.className=Clip
clip.defaultDef=<definition name="Clipping" type="clip">\n\
    x+y+z;\n\
    <variable name="x" type="none">\n\
    <variable name="y" type="none">\n\
    <variable name="z" type="none">\n\
    </definition>

genClip.longName=Clip [implicit]
genClip.shortName=Clip[implicit]
genClip.egFile=defs/genclip.defs
genClip.className=GeneralizedClip
genClip.defaultDef=<definition name="Clip:implicit" type="genClip" opType="asurf">\n\
    S;\n\
    <variable name="S" type="asurf">\n\
    <variable name="x" type="none">\n\
    <variable name="y" type="none">\n\
    <variable name="z" type="none">\n\
    </definition>

genInt.longName=Intersection [psurf]
genInt.shortName=Intersection[psurf]
genInt.egFile=defs/genint.defs
genInt.className=GeneralizedIntersection
genInt.defaultDef=<definition name="Intersect:psurf" type="genInt" opType="psurf">\n\
    S . [1,0,0];\n\
    <variable name="S" type="psurf">\n\
    <variable name="x" type="none">\n\
    <variable name="y" type="none">\n\
    <variable name="z" type="none">\n\
    </definition>

genIntImplicit.longName=Intersections [implicit]
genIntImplicit.shortName=Intersection[implicit]
genIntImplicit.egFile=defs/genintimplicit.defs
genIntImplicit.className=GeneralizedIntersection
genIntImplicit.varient=1
genIntImplicit.defaultDef=<definition name="Intersect:implicit" type="genInt" opType="asurf">\n\
    S;\n\
    <variable name="S" type="asurf">\n\
    <variable name="x" type="none">\n\
    <variable name="y" type="none">\n\
    <variable name="z" type="none">\n\
    </definition>

genMap.longName=Mapping [psurf]
genMap.shortName=Mapping[psurf]
genMap.egFile=defs/genmap.defs
genMap.className=GeneralizedMapping
genMap.defaultDef=<definition name="Map:psurf" type="genMap" opType="psurf">\n\
    S;\n\
    <variable name="S" type="psurf">\n\
    <variable name="x" type="none">\n\
    <variable name="y" type="none">\n\
    <variable name="z" type="none">\n\
    </definition>


genMapImplicit.longName=Mapping [implicit]
genMapImplicit.shortName=Mapping[implicit]
genMapImplicit.egFile=defs/genmapimplicit.defs
genMapImplicit.className=GeneralizedMapping
genMapImplicit.varient=1
genMapImplicit.defaultDef=<definition name="Map:implicit" type="genMap" opType="asurf">\n\
    [diff(S,x),diff(S,y),diff(S,z)];\n\
    <variable name="S" type="asurf">\n\
    <variable name="x" type="none">\n\
    <variable name="y" type="none">\n\
    <variable name="z" type="none">\n\
    </definition>


genMapPCurve.longName=Mapping [pcurve]
genMapPCurve.shortName=Mapping[pcurve]
genMapPCurve.egFile=defs/genmappcurve.defs
genMapPCurve.className=GeneralizedMapping
genMapPCurve.varient=2
genMapPCurve.defaultDef=<definition name="Map:pcurve" type="genMap" opType="pcurve">\n\
    S;\n\
    <variable name="S" type="pcurve">\n\
    <variable name="x" type="none">\n\
    </definition>


biInt.longName=Bi Intersections
biInt.shortName=BiInt
biInt.egFile=defs/biint.defs
biInt.className=BiIntersection
biInt.defaultDef=<definition name="Int:pcurve:pcurve" type="biInt" opType="pcurve">\n\
	S . T;\n\
	<variable name="S" type="pcurve">\n\
	<variable name="T" type="pcurve">\n\
	<variable name="x">\n\
	<variable name="y">\n\
	</definition>

biMap.longName=Bi Mapping
biMap.shortName=BiMap
biMap.egFile=defs/bimap.defs
biMap.className=BiMap
biMap.defaultDef=<definition name="Map:pcurve:pcurve" type="biMap" opType="pcurve">\n\
	S + T;\n\
	<variable name="S" type="pcurve">\n\
	<variable name="T" type="pcurve">\n\
	<variable name="x">\n\
	<variable name="y">\n\
	</definition>

vfield.longName=Vector Field
vfield.shortName=VecField
vfield.egFile=defs/vfield.defs
vfield.className=VecField
vfield.defaultDef=<definition name="Sink" type="vfield">\n\
	[-x,-y,-z];\n\
	<variable name="x">\n\
	<variable name="y">\n\
	<variable name="z">\n\
	</definition>


genVfield.longName=Vector Field [psurf]
genVfield.shortName=VecField[psurf]
genVfield.egFile=defs/genvfield.defs
genVfield.className=GenVecField
genVfield.defaultDef=<definition name="VField:psurf" type="genVfield"  opType="psurf">\n\
	a diff(S,x) + b diff(S,y);\n\
	<variable name="S" type="psurf">\n\
	<variable name="x">\n\
	<variable name="y">\n\
	<parameter name="a" value="1">\n\
	<parameter name="b" value="0">\n\
	</definition>

genVfieldImplicit.longName=Vector Field [Implicit]
genVfieldImplicit.shortName=GenVecField[Implicit]
genVfieldImplicit.egFile=defs/genvfieldimplicit.defs
genVfieldImplicit.className=GenVecField
genVfieldImplicit.defaultDef=<definition name="Implicit" type="genVfield"  opType="asurf">\n\
	[Sxx,Sxy,Sxz,Syy,Syz,Szz, Sx,Sy,Sz];\n\
	Sxx = diff(Sx,x);\n\
	Sxy = diff(Sx,y);\n\
	Sxz = diff(Sx,z);\n\
	Syy = diff(Sy,y);\n\
	Syz = diff(Sy,z);\n\
	Szz = diff(Sz,z);\n\
	Sx = diff(S,x);\n\
	Sy = diff(S,y);\n\
	Sz = diff(S,z);\n\
	<variable name="S" type="asurf">\n\
	<variable name="x">\n\
	<variable name="y">\n\
	<variable name="z">\n\
	<option name="colour" value="Red">\n\
	<option name="orientation" value="Implicit">\n\
	</definition>



icurve.longName=Integral Curve
icurve.shortName=ICurve
icurve.egFile=defs/icurve.defs
icurve.className=ICurve
icurve.defaultDef=<definition name="Sink" type="icurve">\n\
	[-x,-y,-z];\n\
	<variable name="x">\n\
	<variable name="y">\n\
	<variable name="z">\n\
	</definition>
	
genICurve.longName=Integral Curve [psurf]
genICurve.shortName=GenICurve
genICurve.egFile=defs/genicurve.defs
genICurve.className=GenICurve
genICurve.defaultDef=<definition name="Tangent" type="genICurve"  opType="psurf">\n\
	a diff(S,x) + b diff(S,y);\n\
	<variable name="S" type="psurf">\n\
	<variable name="x">\n\
	<variable name="y">\n\
	<parameter name="a" value="1">\n\
	<parameter name="b" value="0">\n\
	</definition>

	
genICurveImplicit.longName=Integral Curve [implicit]
genICurveImplicit.shortName=GenICurve:implicit
genICurveImplicit.egFile=defs/genicurveimplicit.defs
genICurveImplicit.className=GenICurve
genICurveImplicit.defaultDef=["[x,y,z]"]
genICurveImplicit.defaultDef=<definition name="Implicit" type="genVfield"  opType="asurf">\n\
	[Sxx,Sxy,Sxz,Syy,Syz,Szz, Sx,Sy,Sz];\n\
	Sxx = diff(Sx,x);\n\
	Sxy = diff(Sx,y);\n\
	Sxz = diff(Sx,z);\n\
	Syy = diff(Sy,y);\n\
	Syz = diff(Sy,z);\n\
	Szz = diff(Sz,z);\n\
	Sx = diff(S,x);\n\
	Sy = diff(S,y);\n\
	Sz = diff(S,z);\n\
	<variable name="S" type="asurf">\n\
	<variable name="x">\n\
	<variable name="y">\n\
	<variable name="z">\n\
	<option name="colour" value="Red">\n\
	<option name="orientation" value="Implicit">\n\
	</definition>

ridgeInt.longName=Ridge Intersections
ridgeInt.shortName=RidgeInt
ridgeInt.egFile=defs/ridge.defs
ridgeInt.className=RidgeIntersection
ridgeInt.defaultDef=<definition name="Red-Ridge" type="ridgeInt" opType="psurf" >\n\
	Vppp;\n\
	Vppp = (-kappa Sppp . N + 3 Spp . P)/(Plen^3);\n\
	kappa = (P . P) / (Spp . N);\n\
	N = P ^^ Q;\n\
	Plen = sqrt(P.P);\n\
	P = px * Sx + py * Sy;\n\
	Q = qx * Sx + qy * Sy;\n\
	Sppp = Sxxx px px px\n\
	+ 3 Sxxy px px py\n\
	+ 3 Sxyy px py py\n\
	+ Syyy py py py;\n\
	Spp = Sxx * px * px + 2 Sxy px py + Syy py py;\n\
	px = p . [1,0,0];\n\
	py = p . [0,1,0];\n\
	qx = q . [1,0,0];\n\
	qy = q . [0,1,0];\n\
	Sxxx = diff(Sxx,x);\n\
	Sxxy = diff(Sxx,y);\n\
	Sxyy = diff(Sxy,y);\n\
	Syyy = diff(Syy,y);\n\
	Sxx = diff(Sx,x);\n\
	Sxy = diff(Sx,y);\n\
	Syy = diff(Sy,y);\n\
	Sx = diff(S,x);\n\
	Sy = diff(S,y);\n\
	<variable name="S" type="psurf" />\n\
	<variable name="x">\n\
	<variable name="y">\n\
	<variable name="z">\n\
	<variable name="p" type="vfield" />\n\
	<variable name="q" type="vfield" />\n\
	<option name="colour" value="Red"/>\n\
	</definition>

globals.longName=Global Variables
globals.shortName=Globals
globals.egFile=
globals.className=Globals
globals.defaultDef=<definition name="Globals" type="globals">\n</definition>

colour.longName=Colour
colour.shortName=Colour
colour.egFile=defs/colour.defs
colour.className=Colourize
colour.defaultDef=<definition name="Colour" type="colour">\n\
	[(x+1)/2,(y+1)/2,(z+1)/2];\n\
	<variable name="x">\n\
	<variable name="y">\n\
	<variable name="z">\n\
	</definition>

genColour.longName=Colour [psurf]
genColour.shortName=Colour:psurf
genColour.egFile=defs/gencolour.defs
genColour.className=GeneralizedColourize
genColour.defaultDef=<definition name="Colour:psurf" type="genColour" opType="psurf">\n\
	[x-1,y-1,Z-1];\n\
	X = S.[1,0,0]; Y=S.[0,1,0]; Z=S.[0,0,1];\n\
	<variable name="S" type="psurf">\n\
	<variable name="x">\n\
	<variable name="y">\n\
	</definition>

genColourImplicit.longName=Colour [implicit]
genColourImplicit.shortName=Colour[implicit]
genColourImplicit.egFile=defs/gencolourimplicit.defs
genColourImplicit.className=GeneralizedColourize
genColourImplicit.defaultDef=<definition name="Colour:implicit" type="genColour" opType="asurf">\n\
	[(x+1)/2,(Y+1)/2,(Z+1)/2];\n\
	X = diff(S,x);\n\
	Y = diff(S,y);\n\
	Z = diff(S,z);\n\
	<variable name="S" type="asurf">\n\
	<variable name="x">\n\
	<variable name="y">\n\
	<variable name="z">\n\
	</definition>

extrude.longName=Extrude
extrude.shortName=Extrude
extrude.egFile=defs/extrude.defs
extrude.className=Extrude
extrude.defaultDef=<definition name="Extrude" type="extrude">\n\
	[x,y,z+t];\n\
	<variable name="t" min="-1" max="1" steps="10"/>\n\
	<variable name="x"/>\n\
	<variable name="y"/>\n\
	<variable name="z"/>\n\
	</definition>

genExtrude.longName=Extrude [pcurve]
genExtrude.shortName=Extrude[pcurve]
genExtrude.egFile=defs/genextrude.defs
genExtrude.className=GeneralizedExtrude
genExtrude.defaultDef=<definition name="Extrude:pcurve" type="genExtrude" opType="pcurve">\n\
	S + t T;\n\
	T = TT/sqrt(TT.TT);\n\
	TT = diff(S,x);\n\
	<variable name="t" min="-1" max="1" steps="10" type="localVar" />\n\
	<variable name="S" dim="3" type="pcurve">\n\
	<variable name="x" dim="1" type="ingrVar" />\n\
	</definition>

p3.longName=Projective Varieties
p3.shortName=P3
p3.egFile=defs/p3.defs
p3.className=P3
p3.defaultDef=<definition name="Plane" type="p3">\n\
	a x + b y + c z + d w;\n\
	<parameter name="a" value="1" />\n\
	<parameter name="b" value="1" />\n\
	<parameter name="c" value="1" />\n\
	<parameter name="d" value="1" />\n\
	<variable name="x" min="-1.14" max="1.03">\n\
	<variable name="y" min="-1.13" max="1.04">\n\
	<variable name="z" min="-1.12" max="1.05">\n\
	<variable name="w" min="-1.12" max="1.05">\n\
	</definition>

