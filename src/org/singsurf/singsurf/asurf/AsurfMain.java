package org.singsurf.singsurf.asurf;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;

import org.singsurf.singsurf.acurve.AsurfException;
import org.singsurf.singsurf.asurf.PlotAbstract.PlotMode;

import org.nfunk.jep.function.Binomial;

public class AsurfMain implements Runnable {

	boolean dump=false;
	private static boolean pause;
	private static BufferedReader in;
	
	static class SurfDef {
		double[][][] aa;
		Region_info region;
		int coarse,fine,face,edge;
		int selx,sely,selz,seld=0;
		public void setFlags(BoxClevA bc) {
		    if(this.seld!=0) {
		    	bc.global_selx = this.selx;
		    	bc.global_sely = this.sely;
		    	bc.global_selz = this.selz;
		    	bc.global_denom = this.seld;
		    }
		}
	}
	
	static class Kummer1_2 extends SurfDef {
		{
		aa = new double[][][] {
             {{-0.08518400000000037,0.0,2.1472000000000016,0.0,1.56},{0.0,0.0,0.0,0.0,0.0},{2.1472000000000016,0.0,-10.160000000000004,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{1.56,0.0,0.0,0.0,0.0}},
             {{0.0,-0.0,13.280000000000003,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{-13.280000000000003,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{2.1472000000000007,0.0,9.760000000000002,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{9.760000000000002,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{-1.7600000000000002,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}}};
        region = new Region_info(-1.54,1.63,-1.53,1.64,-1.52,1.65);
        coarse = 256;
        fine = 1024;
        face = 4096;
        edge = face*4;
		}

		@Override
		public void setFlags(BoxClevA bc) {
			super.setFlags(bc);
		    bc.triangulate=1;
		    bc.knitFacets=true;
		    bc.refineCurvature=true;		    
		}
		
		
	}

	static class Kummer1_2_tinyres extends SurfDef {
		{
		aa = new double[][][] {
             {{-0.08518400000000037,0.0,2.1472000000000016,0.0,1.56},{0.0,0.0,0.0,0.0,0.0},{2.1472000000000016,0.0,-10.160000000000004,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{1.56,0.0,0.0,0.0,0.0}},
             {{0.0,-0.0,13.280000000000003,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{-13.280000000000003,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{2.1472000000000007,0.0,9.760000000000002,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{9.760000000000002,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{-1.7600000000000002,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}}};
        region = new Region_info(-1.54,1.63,-1.53,1.64,-1.52,1.65);
        coarse = 4;
        fine = coarse*1;
        face = fine*8;
        edge = face*8;
		}

		@Override
		public void setFlags(BoxClevA bc) {
			super.setFlags(bc);
		    bc.triangulate=1;
		    bc.knitFacets=true;
		    bc.refineCurvature=false;	
//		    bc.colortype = BoxClevA.COLOUR_MEAN_CURVATURE;
//		    bc.global_denom=4;
//		    bc.global_selx=0;
//		    bc.global_sely=0;
//		    bc.global_selz=0;
		}

		@Override
		public String toString() {
			return "Kummer surface v=1.2 low res";
		}

	}

	static class Kummer1_2_lowres extends SurfDef {
		{
		aa = new double[][][] {
             {{-0.08518400000000037,0.0,2.1472000000000016,0.0,1.56},{0.0,0.0,0.0,0.0,0.0},{2.1472000000000016,0.0,-10.160000000000004,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{1.56,0.0,0.0,0.0,0.0}},
             {{0.0,-0.0,13.280000000000003,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{-13.280000000000003,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{2.1472000000000007,0.0,9.760000000000002,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{9.760000000000002,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{-1.7600000000000002,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}}};
        region = new Region_info(-1.54,1.63,-1.53,1.64,-1.52,1.65);
        coarse = 16;
        fine = coarse*8;
        face = fine*8;
        edge = face*8;
		}

		@Override
		public void setFlags(BoxClevA bc) {
			super.setFlags(bc);
		    bc.triangulate=1;
		    bc.knitFacets=true;
//		    bc.refineCurvature=true;	
//		    bc.colortype = BoxClevA.COLOUR_MEAN_CURVATURE;
		}

		@Override
		public String toString() {
			return "Kummer surface v=1.2 low res";
		}

	}

	static class Kummer1_2_midres extends SurfDef {
		{
		aa = new double[][][] {
             {{-0.08518400000000037,0.0,2.1472000000000016,0.0,1.56},{0.0,0.0,0.0,0.0,0.0},{2.1472000000000016,0.0,-10.160000000000004,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{1.56,0.0,0.0,0.0,0.0}},
             {{0.0,-0.0,13.280000000000003,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{-13.280000000000003,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{2.1472000000000007,0.0,9.760000000000002,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{9.760000000000002,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
             {{-1.7600000000000002,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}}};
        region = new Region_info(-1.54,1.63,-1.53,1.64,-1.52,1.65);
        coarse = 128;
        fine = coarse*8;
        face = fine*8;
        edge = face*8;
		}
		
		@Override
		public void setFlags(BoxClevA bc) {
			super.setFlags(bc);
		    bc.triangulate=1;
		    bc.knitFacets=true;
		    bc.refineCurvature=false;		    
		}

		@Override
		public String toString() {
			return "Kummer surface v=1.2 medium res";
		}

	}
	
	static class LabsSeptic extends SurfDef {
		{
			aa = new double[][][] {
				{{73.32937779470649,513.3056446131415,1416.4840437812013,1828.3072190066066,966.6990809925252,51.86688811095385,0.9734111603973216,64.0061666841923},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {-123.43289029568753,-556.6361723085007,-873.4898103803973,-456.761173539875,-16.63170164865904,-112.15705647636823,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {51.942614491429204,104.88522898285841,53.942614491429204,57.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,-7.0,0.0,0.0,0.0,0.0,0.0,0.0}},
				{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {7.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
				{{-123.43289029568753,-556.6361723085007,-873.4898103803973,-456.761173539875,-16.63170164865904,-112.15705647636823,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {103.88522898285841,209.77045796571682,107.88522898285841,114.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,-21.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
				{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {-35.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
				{{51.942614491429204,104.88522898285841,53.942614491429204,57.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,-21.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
				{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {21.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
				{{0.0,-7.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
				{{-1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}};
				 region = new Region_info(-20.14,20.03,-20.13,20.340000000000003,-19.12,20.05);
				 coarse=32; fine=coarse*4; face=fine*32; edge=face*4;
		}

		@Override
		public void setFlags(BoxClevA bc) {
			super.setFlags(bc);
		    bc.triangulate=1;
		    bc.knitFacets=true;
//		    bc.knitFacets=false;
//		    bc.littleFacets=true;
		    bc.refineCurvature=true;
		    bc.curvatureLevel1=1;
		    bc.curvatureLevel2=2;
//		    bc.global_denom=256;
//		    bc.global_selx=142;
//		    bc.global_sely=141;
//		    bc.global_selz=139;
		    
//selx=142; sely=141;selz=139; seld=256;
		}

		@Override
		public String toString() {
			return "Labs Septic\n triangulate, knitFacets, refinecurvature, 1,2 ";
		}
	}

	static class Tetrahedral extends SurfDef {
		{
		aa = new double[][][] {
		    	  {{25.0,0.0,-10.0,0.0,1.0},{0.0,0.0,0.0,0.0,0.0},{-10.0,0.0,2.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{1.0,0.0,0.0,0.0,0.0}},
		    	  {{0.0,0.0,0.0,0.0,0.0},{0.0,8.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
		    	  {{-10.0,0.0,2.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{2.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
		    	  {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
		    	  {{1.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}}};
		region = new Region_info(-3.14,3.03,-3.13,3.04,-3.12,3.05);
        coarse = 64;
        fine =256;
        face = 1024;
        edge = 4096;
		}
		
		@Override
		public String toString() {
			return "tetrahedral surface";
		}

	}
	
	static class Ellipsoid extends SurfDef {
		{
	aa = new double[][][] {
		{{-1.0,0.0,6.0},
		 {0.0,0.0,0.0},
		 {3.0,0.0,0.0}},
		{{0.0,0.0,0.0},
		 {0.0,0.0,0.0},
		 {0.0,0.0,0.0}},
		{{1.0,0.0,0.0},
		 {0.0,0.0,0.0},
		 {0.0,0.0,0.0}}};
		 
		coarse=128; fine=128; face=1024; edge=8192;		 
		region = new Region_info(-1.14,1.03,-1.03,1.14,-1.02,1.05);
		}

		@Override
		public void setFlags(BoxClevA bc) {
			super.setFlags(bc);
			bc.knitFacets=true;
			bc.triangulate=0;
		}
		
		@Override
		public String toString() {
			return "Ellipsoid";
		}

	}

	static class Sphere extends SurfDef {
	{
			aa = new double[][][] {
		{{-1.0,0.0,1.0},
		 {0.0,0.0,0.0},
		 {1.0,0.0,0.0}},
		{{0.0,0.0,0.0},
		 {0.0,0.0,0.0},
		 {0.0,0.0,0.0}},
		{{1.0,0.0,0.0},
		 {0.0,0.0,0.0},
		 {0.0,0.0,0.0}}};
		 coarse=4; fine=4; face=32; edge=256;
		 region = new Region_info(-1.14,1.03,-1.13,1.04,-1.12,1.05);
	}

	@Override
	public void setFlags(BoxClevA bc) {
		super.setFlags(bc);
		bc.triangulate=0; bc.knitFacets=true; bc.refineCurvature=false; bc.littleFacets=false; bc.cleanmesh=-1;
	}
	
	@Override
	public String toString() {
		return "Sphere";
	}

	}
	
	static class BarthDoDecic extends SurfDef {
		{
	aa = new double[][][] {
		{{-22.0,0.0,354.0,0.0,-1788.0,0.0,2962.0,0.0,-1788.0,0.0,354.0,0.0,-22.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {354.0,0.0,-3576.0,0.0,18798.029111570813,0.0,-17064.029111570813,0.0,-3576.0,0.0,354.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-1788.0,0.0,-17064.029111570813,0.0,5310.0,0.0,18798.029111570813,0.0,-1788.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {2962.0,0.0,18798.029111570813,0.0,-17064.029111570813,0.0,2962.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-1788.0,0.0,-3576.0,0.0,-1788.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {354.0,0.0,354.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-22.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{354.0,0.0,-3576.0,0.0,-17064.029111570813,0.0,18798.029111570813,0.0,-3576.0,0.0,354.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-3576.0,0.0,81924.0,0.0,-69570.0,0.0,81924.0,0.0,-3576.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {18798.029111570813,0.0,-69570.0,0.0,-69570.0,0.0,-17064.029111570813,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-17064.029111570813,0.0,81924.0,0.0,18798.029111570813,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-3576.0,0.0,-3576.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {354.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{-1788.0,0.0,18798.029111570813,0.0,5310.0,0.0,-17064.029111570813,0.0,-1788.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-17064.029111570813,0.0,-69570.0,0.0,-69570.0,0.0,18798.029111570813,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {5310.0,0.0,-69570.0,0.0,5310.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {18798.029111570813,0.0,-17064.029111570813,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-1788.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{2962.0,0.0,-17064.029111570813,0.0,18798.029111570813,0.0,2962.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {18798.029111570813,0.0,81924.0,0.0,-17064.029111570813,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-17064.029111570813,0.0,18798.029111570813,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {2962.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{-1788.0,0.0,-3576.0,0.0,-1788.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-3576.0,0.0,-3576.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {-1788.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{354.0,0.0,354.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {354.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},
		{{-22.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
		 {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}};
		 
			region = new Region_info(-15.14,15.030000000000001,
					-15.129999999999999,15.04,
					-15.120000000000001,15.05);
			coarse=128; fine=512; face=4096; edge=16384;
		}	
		

		@Override
		public void setFlags(BoxClevA bc) {
			super.setFlags(bc);

			bc.triangulate=1; bc.knitFacets=true; bc.refineCurvature=true; bc.littleFacets=false; bc.cleanmesh=-1;
			bc.curvatureLevel1= 0.6; bc.curvatureLevel2= 1.2; bc.curvatureLevel3= 2.4; bc.curvatureLevel4= 4.8;
			bc.tagbad=0; bc.tagSing=0; bc.blowup=0; bc.global_mode=0;
			bc.convtol=1.0e-09; bc.colortype=0; bc.colourMin=-1.0f; bc.colourMax= 1.0f;
		}
		
		@Override
		public String toString() {
			return "Barth's Dodectic" +
					"Q12 = (x^2+y^2+z^2+w^2)^6;\n" + 
					"S12 = 33 sqrt(5) ( s23m + s34m + s42m)\n" + 
					"        + 19(s23p + s34p + s42p)\n" + 
					"        + 10 s234 - 14 s10 + 2 s11 - 6 s12\n" + 
					"        - 352 s51 + 336 l5^2 l1 + 48 l2 l3 l4;\n" + 
					"s10 = l1 (l2 l3 + l2 l4 + l3 l4);\n" + 
					"s11 = l1^2 ( l2 + l3 + l4);\n" + 
					"s12 = l1 (l2^2 + l3^2 +l4^2);\n" + 
					"s51 = l5^2 ( l2 + l3 + l4);\n" + 
					"s234 = l2^3 + l3^3 + l4^3;\n" + 
					"\n" + 
					"s23p = l2^2 l3 + l2 l3^2;\n" + 
					"s23m = l2^2 l3 - l2 l3^2;\n" + 
					"\n" + 
					"s34p = l3^2 l4 + l3 l4^2;\n" + 
					"s34m = l3^2 l4 - l3 l4^2;\n" + 
					"\n" + 
					"s42p = l4^2 l2 + l4 l2^2;\n" + 
					"s42m = l4^2 l2 - l4 l2^2;\n" + 
					"\n" + 
					"l1 = x^4 + y^4 + z^4 + w^4;\n" + 
					"l2 = x^2 y^2 + z^2 w^2;\n" + 
					"l3 = x^2 z^2 + y^2 w^2;\n" + 
					"l4 = x^2 w^2 + y^2 z^2;\n" + 
					"l5 = x y z w;\n" + 
					"w = 1;";
		}

	}

	

	public AsurfMain(boolean dump) {
		this.dump = dump;
	}

//  double aa[][][] = new double[][][] {
//  {{0.1,0.0,1.0},{0.0,0.0,0.0},{-1.0,0.0,0.0}},
//  {{0.0,0.0,0.0},{0.0,0.0,0.0},{0.0,0.0,0.0}},
//  {{-1.0,0.0,0.0},{0.0,0.0,0.0},{0.0,0.0,0.0}}};

//Region_info reg = new Region_info(-0.94,0.93,-1.13,1.04,-1.12,1.05);
//Swallowtail

//Cayley's cubic
//endless loop
//				double aa[][][] = new double[][][] {
//						{{-1.0,0.0,4.0},{0.0,0.0,0.0},{4.0,0.0,0.0}},
//						{{0.0,0.0,0.0},{0.0,16.0,0.0},{0.0,0.0,0.0}},
//						{{4.0,0.0,0.0},{0.0,0.0,0.0},{0.0,0.0,0.0}}};


//		double aa[][][] = new double[][][] {
//				{{0.0,0.0},{0.0,0.0}},
//				{{0.0,0.0},{0.0,1.0}}};

//		double aa[][][] = new double[][][] {
//				{{0.0,1.0},{1.0,0.0}}};

//Cross-cap
//		double aa[][][] = new double[][][] {
//				{{0.0,0.0,0.0},{0.0,0.0,1.0}},
//				{{0.0,0.0,0.0},{0.0,0.0,0.0}},
//				{{-1.0,0.0,0.0},{0.0,0.0,0.0}}};
//Kummer
//		double aa[][][] = new double[][][] {
//				{{-0.009261000000000408,0.0,0.9282000000000021,0.0,1.7899999999999998},{0.0,0.0,0.0,0.0,0.0},{0.9282000000000021,0.0,-6.940000000000007,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{1.7899999999999998,0.0,0.0,0.0,0.0}},
//				{{0.0,-0.0,10.520000000000005,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{-10.520000000000005,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
//				{{0.9282000000000012,0.0,8.840000000000002,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{8.840000000000002,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
//				{{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},
//				{{-0.840000000000001,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}}};
//Region_info reg = new Region_info(-0.94,0.93,-1.13,1.04,-1.12,1.05);


// Sphere
//double aa[][][] = new double[][][] {
//  {{-1.0, 0.0, 1.0}, {0.0, 0.0, 0.0}, {1.0, 0.0, 0.0}},
//  {{0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}, 
//  {{1.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}};

// Plane
//		double aa[][][] = new double[][][] {
//				{{0.0,1.0},{1.0,0.0}}};

// Two planes crossing
//			double aa[][][] = new double[][][] {
//					{{0.0,0.0,1.0},{0.0,0.0,0.0},{-1.0,0.0,0.0}}};

//Diagonal Surface of Clebsch
//double aa[][][] = new double[][][] {
//{{0.0,0.0,0.0,16.0},{0.0,-0.0,-48.0,0.0},{0.0,-48.0,0.0,0.0},{16.0,0.0,0.0,0.0}},
//{{-72.0,0.0,24.0,0.0},{0.0,0.0,0.0,0.0},{24.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},
//{{-93.53074360871936,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},
//{{-31.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}}};
//Region_info reg = new Region_info(-4.14,4.03,-4.13,4.04,-4.12,4.05);

/*
double aa[][][] = new double[][][] {
	{{2.0,2.0,-2.0,-2.0},{0.0,0.0,0.0,0.0},{6.0,2.0,0.0,0.0}},
	{{0.0,0.0,0.0,0.0},{4.0,-4.0,0.0,0.0},{0.0,0.0,0.0,0.0}},
	{{-2.0,-6.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}}};
Region_info reg = new Region_info(1.36,2.03,-2.13,-1.4600000000000004,-1.5199999999999996,-0.8500000000000002);
*/        

    public static void main(String args[]) {
        in = new BufferedReader(new InputStreamReader(System.in));
        @SuppressWarnings("unused")
		Binomial bi = new Binomial(); // needed so static initilisation done
        pause = false;
        boolean dump=false;
        for(String s:args) {
        	if(s.equals("-dump")) dump=true;
        	if(s.equals("-pause")) pause=true;
        }

        if(pause) {
	        System.out.println("Press enter to start");
	        try {
	        	in.readLine();
			} catch (IOException e1) {
				System.err.println(e1);
			}
        }
		Thread t = new Thread(new AsurfMain(dump),"ASurf");
		t.start();
		try {
			t.join();
		} catch (InterruptedException e) {
			System.out.println("Interupted");
		}
		if(pause) {
			System.out.println("Press enter to exit");
			try {
				in.readLine();
			} catch (IOException e1) {
				System.err.println(e1);
			}
		}


    }

    @Override
    public void run() {
//    	SurfDef def = new LabsSeptic();
    	SurfDef def = new Kummer1_2_tinyres();
//    	SurfDef def = new BarthDoDecic();

    	BoxClevA bc = new BoxClevVrml(PlotMode.JustSurface,new File("asurf.wrl"),def.toString());
//    	BoxClevA bc = new BoxClevObj(PlotMode.JustSurface,new File("asurf.obj"),def.toString());
    	def.setFlags(bc);
    	try {
    		bc.marmain(def.aa, def.region,def.coarse,def.fine,def.face,def.edge);
    		if(pause) {
    			System.out.println("Press enter to exit");
    			try {
    				in.readLine();
    			} catch (IOException e1) {
    				System.err.println(e1);
    			}
    		}

    	} catch (AsurfException e) {
    		e.printStackTrace();
    	}
		

}


}
